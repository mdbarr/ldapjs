#!/usr/bin/env node
// -*- mode: js -*-
// Copyright 2011 Mark Cavage.  All rights reserved.
'use strict';

const path = require('path');

const dashdash = require('dashdash');

const ldap = require('../lib/index');
const Logger = require('bunyan');

////////////////////
// Globals

let parsed;

const opts = [
  {
    names: [ 'attribute', 'a' ],
    type: 'string',
    help: 'Attribute to modify',
    helpArg: 'ATTR',
  },
  {
    names: [ 'value', 'v' ],
    type: 'arrayOfString',
    help: 'Desired value',
    helpArg: 'VAL',
  },
  {
    names: [ 'type', 't' ],
    type: 'string',
    help: 'Attribute type',
    helpArg: 'TYPE',
  },
  { group: 'General options' },
  {
    names: [ 'help', 'h' ],
    type: 'bool',
    help: 'Print this help and exit.',
  },
  {
    names: [ 'debug', 'd' ],
    type: 'integer',
    help: 'Set debug level <0-2>',
    helpArg: 'LEVEL',
  },
  { group: 'Connection Options' },
  {
    names: [ 'url', 'u' ],
    type: 'string',
    help: 'LDAP server URL',
    helpArg: 'URL',
    default: 'ldap://127.0.0.1:389',
  },
  {
    names: [ 'binddn', 'D' ],
    type: 'string',
    help: 'Bind DN',
    helpArg: 'BIND_DN',
    default: '',
  },
  {
    names: [ 'password', 'w' ],
    type: 'string',
    help: 'Bind password',
    helpArg: 'PASSWD',
    default: '',
  },
  {
    names: [ 'insecure', 'i' ],
    type: 'bool',
    env: 'LDAPJS_TLS_INSECURE',
    help: 'Disable SSL certificate verification',
    default: false,
  },
];
const parser = dashdash.createParser({ options: opts });

////////////////////
// Helpers

function usage (code, message) {
  const msg = `${ message ? `${ message }\n` : ''
  }Usage: ${ path.basename(process.argv[1]) } [OPTIONS] DN\n\n${
    parser.help({ includeEnv: true }) }`;

  process.stderr.write(`${ msg }\n`);
  process.exit(code);
}

function perror (err) {
  if (parsed.debug) {
    process.stderr.write(`${ err.stack }\n`);
  } else {
    process.stderr.write(`${ err.message }\n`);
  }
  process.exit(1);
}

////////////////////
// Mainline

let logLevel = 'info';

try {
  parsed = parser.parse(process.argv);
} catch (e) {
  usage(1, e.toString());
}

if (parsed.help) { usage(0); }

if (parsed._args.length < 1) { usage(1, 'DN required'); }
try {
  parsed._args.forEach((dn) => {
    ldap.parseDN(dn);
  });
} catch (e) {
  usage(1, e.toString());
}

if (!parsed.type) { parsed.type = 'replace'; }
if (!parsed.attribute || !Array.isArray(parsed.value)) { usage(1, 'attribute and value required'); }

if (parsed.debug) { logLevel = parsed.debug > 1 ? 'trace' : 'debug'; }

const log = new Logger({
  name: 'ldapjs',
  component: 'client',
  stream: process.stderr,
  level: logLevel,
});

const client = ldap.createClient({
  url: parsed.url,
  log,
  strictDN: false,
  tlsOptions: { rejectUnauthorized: !parsed.insecure },
});

client.on('error', (err) => {
  perror(err);
});

client.bind(parsed.binddn, parsed.password, (err) => {
  if (err) {
    perror(err);
  }

  let finished = 0;
  const mod = {};
  mod[parsed.attribute] = [];
  parsed.value.forEach((v) => {
    mod[parsed.attribute].push(v);
  });
  const change = new ldap.Change({
    type: parsed.type,
    modification: mod,
  });

  function callback (err) {
    if (err) { perror(err); }

    if (++finished === parsed._args.length) {
      client.unbind(() => {

      });
    }
  }

  parsed._args.forEach((dn) => {
    client.modify(dn, change, callback);
  });
});
